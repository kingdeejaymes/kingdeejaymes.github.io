{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/log-form/log-form.component.ts","webpack:///src/app/components/log-form/log-form.component.html","webpack:///src/app/components/logs/logs.component.ts","webpack:///src/app/components/logs/logs.component.html","webpack:///src/app/components/navbar/navbar.component.ts","webpack:///src/app/components/navbar/navbar.component.html","webpack:///src/app/services/log.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","LogFormComponent","logService","isNewLog","selectedLog","subscribe","log","console","text","date","newLog","generateId","Date","addLog","updateLog","clearState","replace","c","r","Math","random","v","toString","onSubmit","LogsComponent","loaded","stateClear","clear","getLogs","logs","setFormLog","logId","deleteLog","NavbarComponent","LogService","logSource","asObservable","stateSource","localStorage","getItem","JSON","parse","sort","a","b","next","unshift","setItem","stringify","logTobeUpdated","item","splice","parseInt","confirm","providedIn","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'devlogger';\n}\n","<app-navbar></app-navbar>\n<div class=\"container\">\n  <app-log-form></app-log-form>\n  <app-logs></app-logs>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { LogFormComponent } from './components/log-form/log-form.component';\nimport { LogsComponent } from './components/logs/logs.component';\nimport { LogService } from '../app/services/log.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavbarComponent,\n    LogFormComponent,\n    LogsComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  providers: [LogService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Log } from '../../models/Log';\nimport { LogService } from '../../services/log.service';\n\n@Component({\n  selector: 'app-log-form',\n  templateUrl: './log-form.component.html',\n  styleUrls: ['./log-form.component.css']\n})\nexport class LogFormComponent implements OnInit {\n  \n  id: string;\n  text: string;\n  date: any;\n  isNewLog: boolean = true;\n\n  constructor(private logService: LogService) { }\n\n  ngOnInit(): void {\n    this.logService.selectedLog.subscribe(log => {\n      console.log('Log ==>', log);\n      if (log.id != null) {\n        this.isNewLog = false;\n        this.id = log.id;\n        this.text = log.text;\n        this.date = log.date;\n      }\n    });\n  }\n\n  onSubmit() {\n    if (this.isNewLog) {\n      const newLog = {\n        id: this.generateId(),\n        text: this.text,\n        date: new Date()\n      };\n\n      // call Service to add log\n      this.logService.addLog(newLog);//.subscribe(log => {});\n    }\n    else {\n      const updateLog = {\n        id: this.id,\n        text: this.text,\n        date: new Date()\n      };\n\n      // call Service to update log\n      this.logService.updateLog(updateLog);//.subscribe(log => {});\n    }\n\n    this.clearState();\n    \n  }\n\n  clearState() {\n    this.isNewLog = true;\n    this.id = '';\n    this.text = '';\n    this.date = '';\n    this.logService.clearState();\n  }\n\n  generateId() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n\n}\n","<div class=\"card card-body mb-3\">\n    <form (ngSubmit)=\"onSubmit()\">\n        <div class=\"form-group\">\n            <input type=\"text\" name=\"text\" [(ngModel)]=\"text\" class=\"form-control\" placeholder=\"Add a log..\">\n        </div>\n        <input type=\"submit\" value=\"Add Log\" class=\"btn btn-dark\" [disabled]=\"!this.text\">\n        <button (click)=\"clearState()\" type=\"button\" class=\"btn btn-warning\" [hidden]=\"!this.text\">Clear</button>\n    </form>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Log } from '../../models/Log';\nimport { LogService } from '../../services/log.service';\n\n@Component({\n  selector: 'app-logs',\n  templateUrl: './logs.component.html',\n  styleUrls: ['./logs.component.css']\n})\nexport class LogsComponent implements OnInit {\n  logs: Log[];\n  selectedLog: Log;\n  loaded: boolean = false;\n\n  constructor(private logService: LogService) { }\n\n  ngOnInit(): void {\n\n    this.logService.stateClear.subscribe(clear => {\n      if (clear) {\n        this.selectedLog = {id: '', text: '', date: ''};\n      }\n    });\n    this.logService.getLogs().subscribe(logs => {\n      this.logs = logs;\n      this.loaded = true;\n    });\n  }\n\n  onSelect(log: Log) {\n    // pass the log from logs component to log-form component\n    this.logService.setFormLog(log);\n    // set the selected log temp variable to log selected from list\n    this.selectedLog = log;\n  }\n\n  onDelete(logId: string) {\n    this.logService.deleteLog(logId);\n  }\n\n}\n","<ul class=\"list-group\" *ngIf=\"loaded && logs?.length > 0\">\n    <li (click)=\"onSelect(log)\" *ngFor=\"let log of logs\"\n        class=\"list-group-item d-flex justify-content-between align-items-center\"\n        [class.list-group-item-secondary]=\"selectedLog == log\">\n        <a href=\"#\">{{ log.text }}</a>\n        <span class=\"log-date\">{{ log.date | date: 'short'}}</span>\n        <i (click)=\"onDelete(log.id)\" class=\"fa fa-remove\"></i>\n    </li>\n</ul>\n\n<div *ngIf=\"loaded && logs?.length == 0\">\n    <h5>No logs in the System...</h5>\n</div>\n\n<div *ngIf=\"!loaded\">\n    <h5>Loading</h5>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<nav class=\"navbar navbar-dark bg-dark mb-4\">\n    <div class=\"container\">\n        <a href=\"/\" class=\"navbar-brand\">DevLogger</a>\n    </div>\n</nav>","import { Injectable } from '@angular/core';\nimport { Log } from '../models/Log';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/Observable/of';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LogService {\n  logs: Log[];\n  private logSource = new BehaviorSubject<Log>({id: null, text: null, date: null});\n  selectedLog = this.logSource.asObservable();\n\n  private stateSource = new BehaviorSubject<boolean>(true);\n  stateClear = this.stateSource.asObservable();\n\n  constructor() {\n    // this.logs = [\n    //   { id: '1', text: 'Generated Components', date: new Date('4/4/2020 10:33:45')},\n    //   { id: '2', text: 'Added Bootstrap', date: new Date('4/5/2020 11:33:45')},\n    //   { id: '3', text: 'Added logs component', date: new Date('4/6/2020 12:33:45')}\n    // ]\n    this.logs = [];\n  }\n\n  getLogs(): Observable<Log[]> {\n    if (localStorage.getItem('logs') === null) {\n      this.logs = [];\n    } else {\n      this.logs = JSON.parse(localStorage.getItem('logs'));\n    }\n    return of(this.logs.sort((a,b) =>{\n      return b.date = a.date;\n    }));\n  }\n\n  setFormLog(log: Log) {\n    this.logSource.next(log);\n  }\n\n  addLog(log: Log) {\n    this.logs.unshift(log);\n    // add to local storage\n    localStorage.setItem('logs', JSON.stringify(this.logs));\n  }\n\n  clearState() {\n    this.stateSource.next(true);\n  }\n\n  updateLog(log: Log) {\n    let logTobeUpdated: Log;\n    for (let item in this.logs) {\n      if (this.logs[item].id == log.id) {\n        this.logs.splice(parseInt(item), 1);\n        logTobeUpdated = {\n          id: log.id,\n          text: log.text,\n          date: new Date()\n        }\n        this.logs.unshift(logTobeUpdated);\n        // add to local storage\n        localStorage.setItem('logs', JSON.stringify(this.logs));\n        break;\n      }\n    }\n  }\n\n  deleteLog(logId: string) {\n    if (confirm('Are you sure?')) {\n      for (let item in this.logs) {\n        if (this.logs[item].id == logId) {\n          this.logs.splice(parseInt(item), 1);\n          // add to local storage\n          localStorage.setItem('logs', JSON.stringify(this.logs));\n          break;\n        }\n      }\n    }\n    \n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}